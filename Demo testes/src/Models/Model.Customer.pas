unit Model.Customer;

interface

uses
  System.SysUtils,
  System.DateUtils,
  MVCFramework.Serializer.Commons,
  MVCFramework,
  MVCFramework.ActiveRecord,
  MVCFramework.Nullables,
  Helper.Util;

type
  [MVCNameCase(ncCamelCase)]
  [MVCTable('customers')]
  TCustomerModel = class(TMVCActiveRecord)
  private
    [MVCTableField('id', [foPrimaryKey, foAutoGenerated])]
    FId: NullableInt64;
    [MVCTableField('name')]
    FName: string;
    [MVCTableField('birthday')]
    FBirthday: NullableTDateTime;
    [MVCTableField('postal_code')]
    FPostalCode: string;
    [MVCTableField('phone')]
    FPhone: string;
    [MVCTableField('city')]
    FCity: string;
    [MVCTableField('address')]
    FAddress: string;
    [MVCTableField('country_code')]
    FCountryCode: string;
    [MVCTableField('age', [foTransient])]
    FAge: NullableInt32;
    procedure SetAddress(const Value: string);
    procedure SetBirthday(const Value: NullableTDateTime);
    procedure SetCity(const Value: string);
    procedure SetCountryCode(const Value: string);
    procedure SetId(const Value: NullableInt64);
    procedure SetName(const Value: string);
    procedure SetPhone(const Value: string);
    procedure SetPostalCode(const Value: string);
  protected
    procedure OnAfterLoad; override;
    procedure OnValidation(const EntityAction: TMVCEntityAction); override;
  public
    property Id: NullableInt64 read FId write SetId;
    property Name: string read FName write SetName;
    property Address: string read FAddress write SetAddress;
    property City: string read FCity write SetCity;
    property PostalCode: string read FPostalCode write SetPostalCode;
    property CountryCode: string read FCountryCode write SetCountryCode;
    property Phone: string read FPhone write SetPhone;
    property Birthday: NullableTDateTime read FBirthday write SetBirthday;
    property Age: NullableInt32 read FAge;
  end;

implementation

{ TCustomerModel }

procedure TCustomerModel.OnAfterLoad;
begin
  if Fbirthday.HasVAlue then
    FAge := Round(YearSpan(Today, FBirthday));
end;

procedure TCustomerModel.OnValidation(const EntityAction: TMVCEntityAction);
begin
  inherited;
  if EntityAction in [eaCreate, eaUpdate] then
    FName := Util.FormatName(FName);
end;

procedure TCustomerModel.SetAddress(const Value: string);
begin
  FAddress := Value;
end;

procedure TCustomerModel.SetBirthday(const Value: NullableTDateTime);
begin
  if Value.HasValue then
  begin
    FBirthday := Value;

    if FBirthDay.Value > Now then
      raise Exception.Create('Data de nascimento não pode ser no futuro!');
  end;
end;

procedure TCustomerModel.SetCity(const Value: string);
begin
  FCity := Value;
end;

procedure TCustomerModel.SetCountryCode(const Value: string);
begin
  FCountryCode := Value;
end;

procedure TCustomerModel.SetId(const Value: NullableInt64);
begin
  FId := Value;
end;

procedure TCustomerModel.SetName(const Value: string);
begin
  FName := Value;
end;

procedure TCustomerModel.SetPhone(const Value: string);
begin
  FPhone := Value;
end;

procedure TCustomerModel.SetPostalCode(const Value: string);
begin
  FPostalCode := Value;
end;

end.
